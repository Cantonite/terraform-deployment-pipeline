name: Continuous Deployment Pipeline

on:
  push:

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    env:
      TF_WORKSPACE: ${{ matrix.environment }}
      TF_IN_AUTOMATION: true
    strategy:
      matrix:
        environment:
          - development
          - staging
          - production
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check --recursive
        continue-on-error: false
      - name: Terraform Init
        id: init
        run: terraform init -input=false
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -var-file="environments/${{ matrix.environment }}.tfvars" -out=${{ matrix.environment }}.tfplan
      - name: Tar files
        id: tar
        run: tar -cvf ${{ matrix.environment }}.tar .terraform .terraform.lock.hcl ${{ matrix.environment }}.tfplan
      - name: Upload Artifacts
        id: artifact-upload
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.environment }}-terraform-build
          path: ./terraform/${{ matrix.environment }}.tar
          retention-days: 1
          if-no-files-found: error

  deploy-development:
    uses: Cantonite/terraform-deployment-pipeline/.github/workflows/terraform-deploy.yaml@main
    needs:
      - ci

  # deploy-development:
  #   name: Deploy Development
  #   runs-on: ubuntu-latest
  #   env:
  #     TF_WORKSPACE: development
  #     TF_IN_AUTOMATION: true
  #   needs:
  #     - ci
  #   environment:
  #     name: development
  #     url: https://app.terraform.io/app/Cantonite/workspaces/terraform-deployment-pipeline-development
  #   steps:
  #     - name: Download Artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: development-terraform-build
  #     - name: Extract Tar
  #       id: tar
  #       run: tar -xvf development.tar
  #     - run: ls -Rla
  #     - uses: hashicorp/setup-terraform@v1
  #       with:
  #         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
  #     - name: Terraform Apply
  #       id: apply
  #       run: terraform apply -input=false development.tfplan

  deploy-staging:
    name: Deploy staging
    runs-on: ubuntu-latest
    env:
      TF_WORKSPACE: staging
      TF_IN_AUTOMATION: true
    needs:
      - deploy-development
    environment:
      name: staging
      url: https://app.terraform.io/app/Cantonite/workspaces/terraform-deployment-pipeline-staging
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: staging-terraform-build
      - name: Extract Tar
        id: tar
        run: tar -xvf staging.tar
      - run: ls -Rla
      - uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Terraform Apply
        id: apply
        run: terraform apply -input=false staging.tfplan

  deploy-production:
    name: Deploy production
    runs-on: ubuntu-latest
    env:
      TF_WORKSPACE: production
      TF_IN_AUTOMATION: true
    needs:
      - deploy-staging
    environment:
      name: production
      url: https://app.terraform.io/app/Cantonite/workspaces/terraform-deployment-pipeline-production
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: production-terraform-build
      - name: Extract Tar
        id: tar
        run: tar -xvf production.tar
      - run: ls -Rla
      - uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Terraform Apply
        id: apply
        run: terraform apply -input=false production.tfplan
